package exception

import (
	"encoding/xml"

	"github.com/PaloAltoNetworks/pango/util"
	"github.com/PaloAltoNetworks/pango/version"
)

// Entry is a normalized, version independent representation of a
// vulnerability protection profile rule.
type Entry struct {
	Name            string
	PacketCapture   string
	Action          string
	BlockIpTrackBy  string
	BlockIpDuration int
	TimeInterval    int
	TimeThreshold   int
	TimeTrackBy     string
	ExemptIps       []string
}

// Copy copies the information from source Entry `s` to this object.  As the
// Name field relates to the XPATH of this object, this field is not copied.
func (o *Entry) Copy(s Entry) {
	o.PacketCapture = s.PacketCapture
	o.Action = s.Action
	o.BlockIpTrackBy = s.BlockIpTrackBy
	o.BlockIpDuration = s.BlockIpDuration
	o.TimeInterval = s.TimeInterval
	o.TimeThreshold = s.TimeThreshold
	o.TimeTrackBy = s.TimeTrackBy
	o.ExemptIps = s.ExemptIps
}

/** Structs / functions for this namespace. **/

func (o Entry) Specify(v version.Number) (string, interface{}) {
	_, fn := versioning(v)
	return o.Name, fn(o)
}

type normalizer interface {
	Normalize() []Entry
	Names() []string
}

type container_v1 struct {
	Answer []entry_v1 `xml:"entry"`
}

func (o *container_v1) Names() []string {
	ans := make([]string, 0, len(o.Answer))
	for i := range o.Answer {
		ans = append(ans, o.Answer[i].Name)
	}

	return ans
}

func (o *container_v1) Normalize() []Entry {
	arr := make([]Entry, 0, len(o.Answer))
	for i := range o.Answer {
		arr = append(arr, o.Answer[i].normalize())
	}
	return arr
}

func (o *entry_v1) normalize() Entry {
	ans := Entry{
		Name:          o.Name,
		PacketCapture: o.PacketCapture,
		ExemptIps:     util.EntToStr(o.ExemptIps),
	}

	if o.Action != nil {
		if o.Action.Default != nil {
			ans.Action = ActionDefault
		} else if o.Action.Allow != nil {
			ans.Action = ActionAllow
		} else if o.Action.Alert != nil {
			ans.Action = ActionAlert
		} else if o.Action.Drop != nil {
			ans.Action = ActionDrop
		} else if o.Action.DropAll != nil {
			ans.Action = ActionDropAll
		} else if o.Action.ResetClient != nil {
			ans.Action = ActionResetClient
		} else if o.Action.ResetServer != nil {
			ans.Action = ActionResetServer
		} else if o.Action.ResetBoth != nil {
			ans.Action = ActionResetBoth
		} else if o.Action.BlockIp != nil {
			ans.Action = ActionBlockIp
			ans.BlockIpTrackBy = o.Action.BlockIp.BlockIpTrackBy
			ans.BlockIpDuration = o.Action.BlockIp.BlockIpDuration
		}
	}

	if o.Time != nil {
		ans.TimeInterval = o.Time.TimeInterval
		ans.TimeThreshold = o.Time.TimeThreshold
		ans.TimeTrackBy = o.Time.TimeTrackBy
	}

	return ans
}

type entry_v1 struct {
	XMLName       xml.Name        `xml:"entry"`
	Name          string          `xml:"name,attr"`
	PacketCapture string          `packet-capture,omitempty"`
	Action        *action_v1      `xml:"action"`
	Time          *timeAttr       `xml:"time-attribute"`
	ExemptIps     *util.EntryType `xml:"exempt-ip"`
}

type action_v1 struct {
	Default     *string  `xml:"default"`
	Allow       *string  `xml:"allow"`
	Alert       *string  `xml:"alert"`
	Drop        *string  `xml:"drop"`
	DropAll     *string  `xml:"drop-all-packets"`
	ResetClient *string  `xml:"reset-client"`
	ResetServer *string  `xml:"reset-server"`
	ResetBoth   *string  `xml:"reset-both"`
	BlockIp     *blockIp `xml:"block-ip"`
}

type blockIp struct {
	BlockIpTrackBy  string `xml:"track-by"`
	BlockIpDuration int    `xml:"duration"`
}

type timeAttr struct {
	TimeInterval  int    `xml:"interval"`
	TimeThreshold int    `xml:"threshold"`
	TimeTrackBy   string `xml:"track-by"`
}

func specify_v1(e Entry) interface{} {
	ans := entry_v1{
		Name:          e.Name,
		PacketCapture: e.PacketCapture,
		ExemptIps:     util.StrToEnt(e.ExemptIps),
	}

	s := ""
	switch e.Action {
	case ActionDefault:
		ans.Action = &action_v1{
			Default: &s,
		}
	case ActionAllow:
		ans.Action = &action_v1{
			Allow: &s,
		}
	case ActionAlert:
		ans.Action = &action_v1{
			Alert: &s,
		}
	case ActionDrop:
		ans.Action = &action_v1{
			Drop: &s,
		}
	case ActionDropAll:
		ans.Action = &action_v1{
			DropAll: &s,
		}
	case ActionResetClient:
		ans.Action = &action_v1{
			ResetClient: &s,
		}
	case ActionResetServer:
		ans.Action = &action_v1{
			ResetServer: &s,
		}
	case ActionResetBoth:
		ans.Action = &action_v1{
			ResetBoth: &s,
		}
	case ActionBlockIp:
		ans.Action = &action_v1{
			BlockIp: &blockIp{
				BlockIpTrackBy:  e.BlockIpTrackBy,
				BlockIpDuration: e.BlockIpDuration,
			},
		}
	}

	if e.TimeInterval != 0 || e.TimeThreshold != 0 || e.TimeTrackBy != "" {
		ans.Time = &timeAttr{
			TimeInterval:  e.TimeInterval,
			TimeThreshold: e.TimeThreshold,
			TimeTrackBy:   e.TimeTrackBy,
		}
	}

	return ans
}

type container_v2 struct {
	Answer []entry_v2 `xml:"entry"`
}

func (o *container_v2) Names() []string {
	ans := make([]string, 0, len(o.Answer))
	for i := range o.Answer {
		ans = append(ans, o.Answer[i].Name)
	}

	return ans
}

func (o *container_v2) Normalize() []Entry {
	arr := make([]Entry, 0, len(o.Answer))
	for i := range o.Answer {
		arr = append(arr, o.Answer[i].normalize())
	}
	return arr
}

func (o *entry_v2) normalize() Entry {
	ans := Entry{
		Name:          o.Name,
		PacketCapture: o.PacketCapture,
		ExemptIps:     util.EntToStr(o.ExemptIps),
	}

	if o.Action != nil {
		if o.Action.Default != nil {
			ans.Action = ActionDefault
		} else if o.Action.Allow != nil {
			ans.Action = ActionAllow
		} else if o.Action.Alert != nil {
			ans.Action = ActionAlert
		} else if o.Action.Drop != nil {
			ans.Action = ActionDrop
		} else if o.Action.ResetClient != nil {
			ans.Action = ActionResetClient
		} else if o.Action.ResetServer != nil {
			ans.Action = ActionResetServer
		} else if o.Action.ResetBoth != nil {
			ans.Action = ActionResetBoth
		} else if o.Action.BlockIp != nil {
			ans.Action = ActionBlockIp
			ans.BlockIpTrackBy = o.Action.BlockIp.BlockIpTrackBy
			ans.BlockIpDuration = o.Action.BlockIp.BlockIpDuration
		}
	}

	if o.Time != nil {
		ans.TimeInterval = o.Time.TimeInterval
		ans.TimeThreshold = o.Time.TimeThreshold
		ans.TimeTrackBy = o.Time.TimeTrackBy
	}

	return ans
}

type entry_v2 struct {
	XMLName       xml.Name        `xml:"entry"`
	Name          string          `xml:"name,attr"`
	PacketCapture string          `packet-capture,omitempty"`
	Action        *action_v2      `xml:"action"`
	Time          *timeAttr       `xml:"time-attribute"`
	ExemptIps     *util.EntryType `xml:"exempt-ip"`
}

type action_v2 struct {
	Default     *string  `xml:"default"`
	Allow       *string  `xml:"allow"`
	Alert       *string  `xml:"alert"`
	Drop        *string  `xml:"drop"`
	ResetClient *string  `xml:"reset-client"`
	ResetServer *string  `xml:"reset-server"`
	ResetBoth   *string  `xml:"reset-both"`
	BlockIp     *blockIp `xml:"block-ip"`
}

func specify_v2(e Entry) interface{} {
	ans := entry_v2{
		Name:          e.Name,
		PacketCapture: e.PacketCapture,
		ExemptIps:     util.StrToEnt(e.ExemptIps),
	}

	s := ""
	switch e.Action {
	case ActionDefault:
		ans.Action = &action_v2{
			Default: &s,
		}
	case ActionAllow:
		ans.Action = &action_v2{
			Allow: &s,
		}
	case ActionAlert:
		ans.Action = &action_v2{
			Alert: &s,
		}
	case ActionDrop:
		ans.Action = &action_v2{
			Drop: &s,
		}
	case ActionResetClient:
		ans.Action = &action_v2{
			ResetClient: &s,
		}
	case ActionResetServer:
		ans.Action = &action_v2{
			ResetServer: &s,
		}
	case ActionResetBoth:
		ans.Action = &action_v2{
			ResetBoth: &s,
		}
	case ActionBlockIp:
		ans.Action = &action_v2{
			BlockIp: &blockIp{
				BlockIpTrackBy:  e.BlockIpTrackBy,
				BlockIpDuration: e.BlockIpDuration,
			},
		}
	}

	if e.TimeInterval != 0 || e.TimeThreshold != 0 || e.TimeTrackBy != "" {
		ans.Time = &timeAttr{
			TimeInterval:  e.TimeInterval,
			TimeThreshold: e.TimeThreshold,
			TimeTrackBy:   e.TimeTrackBy,
		}
	}

	return ans
}
